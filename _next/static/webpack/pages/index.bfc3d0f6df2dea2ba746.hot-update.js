webpackHotUpdate_N_E("pages/index",{

/***/ "./components/pages/about/HeroBanner.tsx":
/*!***********************************************!*\
  !*** ./components/pages/about/HeroBanner.tsx ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var _global_utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global/utils/constants */ \"./global/utils/constants.ts\");\n/* harmony import */ var _Link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Link */ \"./components/Link.tsx\");\n/* harmony import */ var _theme_icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../theme/icons */ \"./components/theme/icons/index.tsx\");\n/* harmony import */ var _ReleaseData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ReleaseData */ \"./components/pages/about/ReleaseData.tsx\");\n/* harmony import */ var _global_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../global/config */ \"./global/config.ts\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nvar _jsxFileName = \"/home/jaseruddin/code/covid/portal/components/pages/about/HeroBanner.tsx\",\n    _this = undefined,\n    _s = $RefreshSig$();\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n/*\n *\n * Copyright (c) 2021 The Ontario Institute for Cancer Research. All rights reserved\n *\n *  This program and the accompanying materials are made available under the terms of\n *  the GNU Affero General Public License v3.0. You should have received a copy of the\n *  GNU Affero General Public License along with this program.\n *   If not, see <http://www.gnu.org/licenses/>.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\n *  SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n *  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n *  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\n\n\n\n\n\n/** Layout notes:\n  - Article is the full-width background for the hero banner\n  - Section centers the content in larger screens\n ** */\n\n\n\n\nvar _ref = false ? undefined : {\n  name: \"197d5lu-HeroBanner\",\n  styles: \"display:flex;label:HeroBanner;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref2 = false ? undefined : {\n  name: \"1ydo6ui-HeroBanner\",\n  styles: \"left:-42px;position:absolute;label:HeroBanner;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref3 = false ? undefined : {\n  name: \"7i3ym-HeroBanner\",\n  styles: \"font-size:30px;font-weight:normal;position:relative;@media (min-width: 1345px){font-size:34px;};label:HeroBanner;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref4 = false ? undefined : {\n  name: \"5g2mww-HeroBanner\",\n  styles: \"display:flex;flex-direction:column;justify-content:space-between;max-width:1550px;width:100%;>*{margin:0;&:not(h1){margin-top:20px;}};label:HeroBanner;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar HeroBanner = function HeroBanner() {\n  _s();\n\n  var theme = Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"useTheme\"])();\n  var enabledButtonCss = /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(theme.typography.button, \";background-color:\", theme.colors.accent3, \";border-color:\", theme.colors.accent3, \";line-height:20px;margin-right:15px;padding:8px 20px;width:fit-content;&:hover{color:\", theme.colors.white, \";background-color:\", theme.colors.accent3_dark, \";}\" + (false ? undefined : \";label:enabledButtonCss;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n  var disabledButtonCss = /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(theme.typography.button, \";background-color:\", theme.colors.grey_4, \";border-color:\", theme.colors.grey_2, \";line-height:20px;margin-right:15px;padding:8px 20px;width:fit-content;pointer-events:none;\" + (false ? undefined : \";label:disabledButtonCss;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n  return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"article\", {\n    css: /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(\"background-color:\", theme.colors.primary_dark, \";box-sizing:border-box;color:\", theme.colors.white, \";display:flex;padding:45px 50px;width:100%;@media (min-width: 1270px){background-image:url('/images/about-hero.png');background-repeat:no-repeat;background-size:589px;height:400px;padding-left:630px;}@media (min-width: 2165px){padding-left:50px;justify-content:center;}@media (min-width: 2170px){}@media (min-width: 2880px){padding-left:50px;}\" + (false ? undefined : \";label:HeroBanner;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2phc2VydWRkaW4vY29kZS9jb3ZpZC9wb3J0YWwvY29tcG9uZW50cy9wYWdlcy9hYm91dC9IZXJvQmFubmVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtRWMiLCJmaWxlIjoiL2hvbWUvamFzZXJ1ZGRpbi9jb2RlL2NvdmlkL3BvcnRhbC9jb21wb25lbnRzL3BhZ2VzL2Fib3V0L0hlcm9CYW5uZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgVGhlIE9udGFyaW8gSW5zdGl0dXRlIGZvciBDYW5jZXIgUmVzZWFyY2guIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiAgVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mXG4gKiAgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2My4wLiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZVxuICogIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqICAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZXG4gKiAgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiAgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlRcbiAqICBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiAqICBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURURcbiAqICBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7XG4gKiAgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVJcbiAqICBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOXG4gKiAgQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MsIHVzZVRoZW1lIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4uLy4uL3RoZW1lJztcbmltcG9ydCB7IEVYUExPUkVSX1BBVEgsIFRFQU1fUEFUSCB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbC91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IHsgU3R5bGVkTGlua0FzQnV0dG9uLCBJbnRlcm5hbExpbmsgYXMgTGluayB9IGZyb20gJy4uLy4uL0xpbmsnO1xuaW1wb3J0IHsgTWFwbGVMZWFmIH0gZnJvbSAnLi4vLi4vdGhlbWUvaWNvbnMnO1xuaW1wb3J0IFJlbGVhc2VEYXRhIGZyb20gJy4vUmVsZWFzZURhdGEnO1xuaW1wb3J0IHsgRElTQUJMRV9FWFBMT1JFUiB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbC9jb25maWcnO1xuXG4vKiogTGF5b3V0IG5vdGVzOlxuICAtIEFydGljbGUgaXMgdGhlIGZ1bGwtd2lkdGggYmFja2dyb3VuZCBmb3IgdGhlIGhlcm8gYmFubmVyXG4gIC0gU2VjdGlvbiBjZW50ZXJzIHRoZSBjb250ZW50IGluIGxhcmdlciBzY3JlZW5zXG4gKiogKi9cblxuY29uc3QgSGVyb0Jhbm5lciA9ICgpOiBSZWFjdEVsZW1lbnQgPT4ge1xuICBjb25zdCB0aGVtZTogdHlwZW9mIGRlZmF1bHRUaGVtZSA9IHVzZVRoZW1lKCk7XG5cbiAgY29uc3QgZW5hYmxlZEJ1dHRvbkNzcyA9IGNzc2BcbiAgICAke3RoZW1lLnR5cG9ncmFwaHkuYnV0dG9ufTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RoZW1lLmNvbG9ycy5hY2NlbnQzfTtcbiAgICBib3JkZXItY29sb3I6ICR7dGhlbWUuY29sb3JzLmFjY2VudDN9O1xuICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIG1hcmdpbi1yaWdodDogMTVweDtcbiAgICBwYWRkaW5nOiA4cHggMjBweDtcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgIGNvbG9yOiAke3RoZW1lLmNvbG9ycy53aGl0ZX07XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RoZW1lLmNvbG9ycy5hY2NlbnQzX2Rhcmt9O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBkaXNhYmxlZEJ1dHRvbkNzcyA9IGNzc2BcbiAgICAke3RoZW1lLnR5cG9ncmFwaHkuYnV0dG9ufTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RoZW1lLmNvbG9ycy5ncmV5XzR9O1xuICAgIGJvcmRlci1jb2xvcjogJHt0aGVtZS5jb2xvcnMuZ3JleV8yfTtcbiAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7XG4gICAgcGFkZGluZzogOHB4IDIwcHg7XG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPGFydGljbGVcbiAgICAgIGNzcz17Y3NzYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RoZW1lLmNvbG9ycy5wcmltYXJ5X2Rhcmt9O1xuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICBjb2xvcjogJHt0aGVtZS5jb2xvcnMud2hpdGV9O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBwYWRkaW5nOiA0NXB4IDUwcHg7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICAgIEBtZWRpYSAobWluLXdpZHRoOiAxMjcwcHgpIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy9pbWFnZXMvYWJvdXQtaGVyby5wbmcnKTtcbiAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogNTg5cHg7XG4gICAgICAgICAgaGVpZ2h0OiA0MDBweDtcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDYzMHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6IDIxNjVweCkge1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogNTBweDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIEBtZWRpYSAobWluLXdpZHRoOiAyMTcwcHgpIHtcbiAgICAgICAgfVxuXG4gICAgICAgIEBtZWRpYSAobWluLXdpZHRoOiAyODgwcHgpIHtcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDUwcHg7XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgPlxuICAgICAgPHNlY3Rpb25cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICBtYXgtd2lkdGg6IDE1NTBweDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcblxuICAgICAgICAgID4gKiB7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG5cbiAgICAgICAgICAgICY6bm90KGgxKSB7XG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8aDFcbiAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAgICAgICAgIEBtZWRpYSAobWluLXdpZHRoOiAxMzQ1cHgpIHtcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAzNHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGB9XG4gICAgICAgID5cbiAgICAgICAgICA8TWFwbGVMZWFmXG4gICAgICAgICAgICBzdHlsZT17Y3NzYFxuICAgICAgICAgICAgICBsZWZ0OiAtNDJweDtcbiAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgYH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIENhbmFkaWFuIFZpcnVzU2VxIERhdGEgUG9ydGFsXG4gICAgICAgIDwvaDE+XG5cbiAgICAgICAgPHBcbiAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgICR7dGhlbWUudHlwb2dyYXBoeS5zdWJoZWFkaW5nfVxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICBgfVxuICAgICAgICA+XG4gICAgICAgICAgVGhlIGdvYWwgb2YgdGhlIENhbkNPR2VOIFZpcnVzU2VxIHByb2plY3QgaXMgdG8gc2VxdWVuY2UgdXAgdG8gMTUwLDAwMCB2aXJhbCBzYW1wbGVzIGZyb21cbiAgICAgICAgICBDYW5hZGlhbnMgdGVzdGluZyBwb3NpdGl2ZSBmb3IgQ09WSUQtMTkuIFRoZSBWaXJ1c1NlcSBEYXRhIFBvcnRhbCBpcyBhbiBvcGVuLXNvdXJjZSBhbmRcbiAgICAgICAgICBvcGVuLWFjY2VzcyBkYXRhIHBvcnRhbCBmb3IgYWxsIENhbmFkaWFuIFNBUlMtQ29WLTIgc2VxdWVuY2VzIGFuZCBhc3NvY2lhdGVkIG5vbi1wZXJzb25hbFxuICAgICAgICAgIGNvbnRleHR1YWwgZGF0YS4gSXQgaGFybW9uaXplcywgdmFsaWRhdGVzIGFuZCBhdXRvbWF0ZXMgc3VibWlzc2lvbiB0byBpbnRlcm5hdGlvbmFsXG4gICAgICAgICAgZGF0YWJhc2VzLlxuICAgICAgICA8L3A+XG5cbiAgICAgICAgeyFESVNBQkxFX0VYUExPUkVSICYmIDxSZWxlYXNlRGF0YSAvPn1cblxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGB9XG4gICAgICAgID5cbiAgICAgICAgICA8TGluayBkaXNhYmxlZD17RElTQUJMRV9FWFBMT1JFUn0gcGF0aD17RVhQTE9SRVJfUEFUSH0+XG4gICAgICAgICAgICA8U3R5bGVkTGlua0FzQnV0dG9uIGNzcz17RElTQUJMRV9FWFBMT1JFUiA/IGRpc2FibGVkQnV0dG9uQ3NzIDogZW5hYmxlZEJ1dHRvbkNzc30+XG4gICAgICAgICAgICAgIEV4cGxvcmUgdGhlIERhdGFcbiAgICAgICAgICAgIDwvU3R5bGVkTGlua0FzQnV0dG9uPlxuICAgICAgICAgIDwvTGluaz5cblxuICAgICAgICAgIDxMaW5rIHBhdGg9e1RFQU1fUEFUSH0+XG4gICAgICAgICAgICA8U3R5bGVkTGlua0FzQnV0dG9uXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgICAgICR7dGhlbWUudHlwb2dyYXBoeS5idXR0b259O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dGhlbWUuY29sb3JzLmFjY2VudDN9O1xuICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHt0aGVtZS5jb2xvcnMuYWNjZW50M307XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogOHB4IDIwcHg7XG4gICAgICAgICAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xuXG4gICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHt0aGVtZS5jb2xvcnMud2hpdGV9O1xuICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0aGVtZS5jb2xvcnMuYWNjZW50M19kYXJrfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIE1lZXQgdGhlIFRlYW1cbiAgICAgICAgICAgIDwvU3R5bGVkTGlua0FzQnV0dG9uPlxuICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC9hcnRpY2xlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSGVyb0Jhbm5lcjtcbiJdfQ== */\"),\n    children: Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsxs\"])(\"section\", {\n      css: _ref4,\n      children: [Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsxs\"])(\"h1\", {\n        css: _ref3,\n        children: [Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(_theme_icons__WEBPACK_IMPORTED_MODULE_3__[\"MapleLeaf\"], {\n          style: _ref2\n        }), \"Canadian VirusSeq Data Portal\"]\n      }), Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"p\", {\n        css: /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(theme.typography.subheading, \" font-weight:normal;\" + (false ? undefined : \";label:HeroBanner;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n        children: \"The goal of the CanCOGeN VirusSeq project is to sequence up to 150,000 viral samples from Canadians testing positive for COVID-19. The VirusSeq Data Portal is an open-source and open-access data portal for all Canadian SARS-CoV-2 sequences and associated non-personal contextual data. It harmonizes, validates and automates submission to international databases.\"\n      }), !_global_config__WEBPACK_IMPORTED_MODULE_5__[\"DISABLE_EXPLORER\"] && Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(_ReleaseData__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}), Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsxs\"])(\"div\", {\n        css: _ref,\n        children: [Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_2__[\"InternalLink\"], {\n          disabled: _global_config__WEBPACK_IMPORTED_MODULE_5__[\"DISABLE_EXPLORER\"],\n          path: _global_utils_constants__WEBPACK_IMPORTED_MODULE_1__[\"EXPLORER_PATH\"],\n          children: Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_2__[\"StyledLinkAsButton\"], {\n            css: _global_config__WEBPACK_IMPORTED_MODULE_5__[\"DISABLE_EXPLORER\"] ? disabledButtonCss : enabledButtonCss,\n            children: \"Explore the Data\"\n          })\n        }), Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_2__[\"InternalLink\"], {\n          path: _global_utils_constants__WEBPACK_IMPORTED_MODULE_1__[\"TEAM_PATH\"],\n          children: Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_2__[\"StyledLinkAsButton\"], {\n            css: /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(theme.typography.button, \";background-color:\", theme.colors.accent3, \";border-color:\", theme.colors.accent3, \";line-height:20px;padding:8px 20px;width:fit-content;&:hover{color:\", theme.colors.white, \";background-color:\", theme.colors.accent3_dark, \";}\" + (false ? undefined : \";label:HeroBanner;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n            children: \"Meet the Team\"\n          })\n        })]\n      })]\n    })\n  });\n};\n\n_s(HeroBanner, \"FrWnLM/uESTr9HtFVmFsfeRnlj4=\", false, function () {\n  return [_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"useTheme\"]];\n});\n\n_c = HeroBanner;\n/* harmony default export */ __webpack_exports__[\"default\"] = (HeroBanner);\n\nvar _c;\n\n$RefreshReg$(_c, \"HeroBanner\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/pages/about/HeroBanner.tsx\n");

/***/ })

})