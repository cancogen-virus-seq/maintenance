webpackHotUpdate_N_E("pages/_error",{

/***/ "./components/NavBar.tsx":
/*!*******************************!*\
  !*** ./components/NavBar.tsx ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/router */ \"./node_modules/next/dist/client/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _UserDropdown__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UserDropdown */ \"./components/UserDropdown.tsx\");\n/* harmony import */ var _global_hooks_useAuthContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global/hooks/useAuthContext */ \"./global/hooks/useAuthContext.tsx\");\n/* harmony import */ var _Link__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Link */ \"./components/Link.tsx\");\n/* harmony import */ var _global_utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../global/utils/constants */ \"./global/utils/constants.ts\");\n/* harmony import */ var _global_config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../global/config */ \"./global/config.ts\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nvar _jsxFileName = \"/home/jaseruddin/code/covid/portal/components/NavBar.tsx\",\n    _this = undefined,\n    _s = $RefreshSig$();\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n/*\n *\n * Copyright (c) 2021 The Ontario Institute for Cancer Research. All rights reserved\n *\n *  This program and the accompanying materials are made available under the terms of\n *  the GNU Affero General Public License v3.0. You should have received a copy of the\n *  GNU Affero General Public License along with this program.\n *   If not, see <http://www.gnu.org/licenses/>.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\n *  SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n *  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n *  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\n\n\n\n\n\n\n\n\n\nvar _ref = false ? undefined : {\n  name: \"1fbfsvs-NavBar\",\n  styles: \"display:flex;align-items:center;justify-content:flex-end;height:100%;width:100%;label:NavBar;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2phc2VydWRkaW4vY29kZS9jb3ZpZC9wb3J0YWwvY29tcG9uZW50cy9OYXZCYXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlLb0IiLCJmaWxlIjoiL2hvbWUvamFzZXJ1ZGRpbi9jb2RlL2NvdmlkL3BvcnRhbC9jb21wb25lbnRzL05hdkJhci50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAyMSBUaGUgT250YXJpbyBJbnN0aXR1dGUgZm9yIENhbmNlciBSZXNlYXJjaC4gQWxsIHJpZ2h0cyByZXNlcnZlZFxuICpcbiAqICBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2ZcbiAqICB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIHYzLjAuIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlXG4gKiAgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBBTllcbiAqICBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVNcbiAqICBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuICogIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuICogIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRFxuICogIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUztcbiAqICBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUlxuICogIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU5cbiAqICBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKlxuICovXG5cbmltcG9ydCB7IFJlYWN0RWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcywgdXNlVGhlbWUgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L3JvdXRlcic7XG5cbmltcG9ydCBVc2VyRHJvcGRvd24gZnJvbSAnLi9Vc2VyRHJvcGRvd24nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL3RoZW1lJztcbmltcG9ydCB1c2VBdXRoQ29udGV4dCBmcm9tICcuLi9nbG9iYWwvaG9va3MvdXNlQXV0aENvbnRleHQnO1xuaW1wb3J0IHsgSW50ZXJuYWxMaW5rIGFzIExpbmsgfSBmcm9tICcuL0xpbmsnO1xuaW1wb3J0IHtcbiAgQUJPVVRfUEFUSCxcbiAgRVhQTE9SRVJfUEFUSCxcbiAgUk9PVF9QQVRILFxuICBTVUJNSVNTSU9OX1BBVEgsXG4gIFVTRVJfUEFUSCxcbiAgVEVBTV9QQVRILFxufSBmcm9tICcuLi9nbG9iYWwvdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IERJU0FCTEVfRVhQTE9SRVIsIERJU0FCTEVfU1VCTUlTU0lPTiB9IGZyb20gJy4uL2dsb2JhbC9jb25maWcnO1xuXG5jb25zdCBOYXZCYXIgPSAoKTogUmVhY3RFbGVtZW50ID0+IHtcbiAgY29uc3QgeyB0b2tlbiB9ID0gdXNlQXV0aENvbnRleHQoKTtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gIGNvbnN0IHRoZW1lOiB0eXBlb2YgZGVmYXVsdFRoZW1lID0gdXNlVGhlbWUoKTtcblxuICBjb25zdCBhY3RpdmVMaW5rU3R5bGUgPSBgXG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJHt0aGVtZS5jb2xvcnMuYWNjZW50fTtcbiAgICBjb2xvcjogJHt0aGVtZS5jb2xvcnMuYWNjZW50X2xpZ2h0fTtcblxuICAgIHN2ZyBwYXRoIHtcbiAgICAgIGZpbGw6ICR7dGhlbWUuY29sb3JzLmFjY2VudF9saWdodH07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IGxpbmtTdHlsZSA9IGBcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlci1ib3R0b206IDVweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGNvbG9yOiAke3RoZW1lLmNvbG9ycy53aGl0ZX07XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleDogMDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgcGFkZGluZzogMCAycmVtO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHdpZHRoOiBmaXQtY29udGVudDtcblxuICAgIHN2ZyBwYXRoIHtcbiAgICAgIGZpbGw6ICR7dGhlbWUuY29sb3JzLndoaXRlfTtcbiAgICB9XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgICR7YWN0aXZlTGlua1N0eWxlfVxuICAgIH1cbiAgYDtcblxuICBjb25zdCBleHBsb3JlRGF0YUxpbmtEaXNhYmxlZENzcyA9IGNzc2BcbiAgICAke2xpbmtTdHlsZX1cbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICBjb2xvcjogJHt0aGVtZS5jb2xvcnMuZ3JleV8zfTtcbiAgYDtcblxuICBjb25zdCBleHBsb3JlRGF0YUxpbmtFbmFibGVkQ3NzID0gY3NzYFxuICAgICR7bGlua1N0eWxlfVxuICAgICR7cm91dGVyLmFzUGF0aC5zdGFydHNXaXRoKEVYUExPUkVSX1BBVEgpID8gYWN0aXZlTGlua1N0eWxlIDogJyd9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e2Nzc2BcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICBoZWlnaHQ6ICR7dGhlbWUuZGltZW5zaW9ucy5uYXZiYXIuaGVpZ2h0fXB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiAke3RoZW1lLmNvbG9ycy5wcmltYXJ5fSB1cmwoL2ltYWdlcy9uYXZiYXItYmcucG5nKSBuby1yZXBlYXQ7XG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogMjgxcHg7XG4gICAgICAgICR7dGhlbWUuc2hhZG93LmRlZmF1bHR9O1xuICAgICAgICBwb3NpdGlvbjogc3RpY2t5O1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgYH1cbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBtYXJnaW4tbGVmdDogNDBweDtcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGB9XG4gICAgICA+XG4gICAgICAgIDxMaW5rIHBhdGg9e1JPT1RfUEFUSH0+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICBgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWcgc3JjPVwiL2ltYWdlcy9uYXZiYXItbG9nby5wbmdcIiBhbHQ9XCJsb2dvcyBmb3IgQ2FuQ09HZU4gYW5kIFZpcnVzU2VxXCIgd2lkdGg9XCIyOTZcIiAvPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9MaW5rPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGB9XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgYH1cbiAgICAgICAgPlxuICAgICAgICAgIDxMaW5rIHBhdGg9e0FCT1VUX1BBVEh9PlxuICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICAgJHtsaW5rU3R5bGV9XG4gICAgICAgICAgICAgICAgJHtyb3V0ZXIuYXNQYXRoID09PSBBQk9VVF9QQVRIID8gYWN0aXZlTGlua1N0eWxlIDogJyd9XG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIEFib3V0IFZpcnVzU2VxIERhdGEgUG9ydGFsXG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgIDxMaW5rIGRpc2FibGVkPXtESVNBQkxFX0VYUExPUkVSfSBwYXRoPXtFWFBMT1JFUl9QQVRIfT5cbiAgICAgICAgICAgIDxhIGNzcz17RElTQUJMRV9FWFBMT1JFUiA/IGV4cGxvcmVEYXRhTGlua0Rpc2FibGVkQ3NzIDogZXhwbG9yZURhdGFMaW5rRW5hYmxlZENzc30+XG4gICAgICAgICAgICAgIEV4cGxvcmUgVmlydXNTZXEgRGF0YVxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICA8TGluayBwYXRoPXtURUFNX1BBVEh9PlxuICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICAgJHtsaW5rU3R5bGV9XG4gICAgICAgICAgICAgICAgJHtyb3V0ZXIuYXNQYXRoLnN0YXJ0c1dpdGgoVEVBTV9QQVRIKSA/IGFjdGl2ZUxpbmtTdHlsZSA6ICcnfVxuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBNZWV0IHRoZSBUZWFtXG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgeyFESVNBQkxFX1NVQk1JU1NJT04gJiYgdG9rZW4gJiYgKFxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgYH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8TGluayBwYXRoPXtTVUJNSVNTSU9OX1BBVEh9PlxuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgICAgICAgJHtsaW5rU3R5bGV9XG4gICAgICAgICAgICAgICAgICAke3JvdXRlci5hc1BhdGguc3RhcnRzV2l0aChTVUJNSVNTSU9OX1BBVEgpID8gYWN0aXZlTGlua1N0eWxlIDogJyd9XG4gICAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIFN1Ym1pc3Npb24gRGFzaGJvYXJkXG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgIDxVc2VyRHJvcGRvd25cbiAgICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICAgZmxvYXQ6IG5vbmU7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDE5NXB4O1xuICAgICAgICAgICAgICAgICR7bGlua1N0eWxlfVxuICAgICAgICAgICAgICAgICR7cm91dGVyLmFzUGF0aC5zdGFydHNXaXRoKFVTRVJfUEFUSCkgPyBhY3RpdmVMaW5rU3R5bGUgOiAnJ31cblxuICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgJHthY3RpdmVMaW5rU3R5bGV9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTmF2QmFyO1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref2 = false ? undefined : {\n  name: \"anb65c-NavBar\",\n  styles: \"display:flex;align-items:center;height:100%;width:100%;label:NavBar;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref3 = false ? undefined : {\n  name: \"145srhb-NavBar\",\n  styles: \"display:flex;align-items:center;justify-content:space-between;width:100%;label:NavBar;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref4 = false ? undefined : {\n  name: \"nvo13-NavBar\",\n  styles: \"display:flex;align-items:center;text-decoration:none;label:NavBar;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref5 = false ? undefined : {\n  name: \"1jj7y1g-NavBar\",\n  styles: \"display:flex;align-items:center;margin-left:40px;cursor:pointer;label:NavBar;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar NavBar = function NavBar() {\n  _s();\n\n  var _useAuthContext = Object(_global_hooks_useAuthContext__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(),\n      token = _useAuthContext.token;\n\n  var router = Object(next_router__WEBPACK_IMPORTED_MODULE_1__[\"useRouter\"])();\n  var theme = Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"useTheme\"])();\n  var activeLinkStyle = \"\\n    border-bottom-color: \".concat(theme.colors.accent, \";\\n    color: \").concat(theme.colors.accent_light, \";\\n\\n    svg path {\\n      fill: \").concat(theme.colors.accent_light, \";\\n    }\\n  \");\n  var linkStyle = \"\\n    align-items: center;\\n    border-bottom: 5px solid transparent;\\n    box-sizing: border-box;\\n    color: \".concat(theme.colors.white, \";\\n    cursor: pointer;\\n    display: flex;\\n    flex: 0;\\n    font-weight: bold;\\n    height: 100%;\\n    justify-content: center;\\n    padding: 0 2rem;\\n    text-decoration: none;\\n    white-space: nowrap;\\n    width: fit-content;\\n\\n    svg path {\\n      fill: \").concat(theme.colors.white, \";\\n    }\\n\\n    &:hover {\\n      \").concat(activeLinkStyle, \"\\n    }\\n  \");\n  var exploreDataLinkDisabledCss = /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(linkStyle, \" pointer-events:none;color:\", theme.colors.grey_3, \";\" + (false ? undefined : \";label:exploreDataLinkDisabledCss;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n  var exploreDataLinkEnabledCss = /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(linkStyle, \" \", router.asPath.startsWith(_global_utils_constants__WEBPACK_IMPORTED_MODULE_5__[\"EXPLORER_PATH\"]) ? activeLinkStyle : '', \";\" + (false ? undefined : \";label:exploreDataLinkEnabledCss;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n  return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(\"div\", {\n    css: /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(\"display:flex;justify-content:flex-start;height:\", theme.dimensions.navbar.height, \"px;background:\", theme.colors.primary, \" url(/images/navbar-bg.png) no-repeat;background-size:281px;\", theme.shadow[\"default\"], \";position:sticky;top:0;left:0;z-index:1;width:100%;\" + (false ? undefined : \";label:NavBar;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n    children: [Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"div\", {\n      css: _ref5,\n      children: Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_4__[\"InternalLink\"], {\n        path: _global_utils_constants__WEBPACK_IMPORTED_MODULE_5__[\"ROOT_PATH\"],\n        children: Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"a\", {\n          css: _ref4,\n          children: Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"img\", {\n            src: \"/images/navbar-logo.png\",\n            alt: \"logos for CanCOGeN and VirusSeq\",\n            width: \"296\"\n          })\n        })\n      })\n    }), Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(\"div\", {\n      css: _ref3,\n      children: [Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(\"div\", {\n        css: _ref2,\n        children: [Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_4__[\"InternalLink\"], {\n          path: _global_utils_constants__WEBPACK_IMPORTED_MODULE_5__[\"ABOUT_PATH\"],\n          children: Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"a\", {\n            css: /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(linkStyle, \" \", router.asPath === _global_utils_constants__WEBPACK_IMPORTED_MODULE_5__[\"ABOUT_PATH\"] ? activeLinkStyle : '', \";\" + (false ? undefined : \";label:NavBar;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n            children: \"About VirusSeq Data Portal\"\n          })\n        }), Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_4__[\"InternalLink\"], {\n          disabled: _global_config__WEBPACK_IMPORTED_MODULE_6__[\"DISABLE_EXPLORER\"],\n          path: _global_utils_constants__WEBPACK_IMPORTED_MODULE_5__[\"EXPLORER_PATH\"],\n          children: Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"a\", {\n            css: _global_config__WEBPACK_IMPORTED_MODULE_6__[\"DISABLE_EXPLORER\"] ? exploreDataLinkDisabledCss : exploreDataLinkEnabledCss,\n            children: \"Explore VirusSeq Data\"\n          })\n        }), Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_4__[\"InternalLink\"], {\n          path: _global_utils_constants__WEBPACK_IMPORTED_MODULE_5__[\"TEAM_PATH\"],\n          children: Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"a\", {\n            css: /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(linkStyle, \" \", router.asPath.startsWith(_global_utils_constants__WEBPACK_IMPORTED_MODULE_5__[\"TEAM_PATH\"]) ? activeLinkStyle : '', \";\" + (false ? undefined : \";label:NavBar;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n            children: \"Meet the Team\"\n          })\n        })]\n      }), !_global_config__WEBPACK_IMPORTED_MODULE_6__[\"DISABLE_SUBMISSION\"] && token && Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(\"div\", {\n        css: _ref,\n        children: [Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_4__[\"InternalLink\"], {\n          path: _global_utils_constants__WEBPACK_IMPORTED_MODULE_5__[\"SUBMISSION_PATH\"],\n          children: Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"a\", {\n            css: /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(linkStyle, \" \", router.asPath.startsWith(_global_utils_constants__WEBPACK_IMPORTED_MODULE_5__[\"SUBMISSION_PATH\"]) ? activeLinkStyle : '', \";\" + (false ? undefined : \";label:NavBar;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n            children: \"Submission Dashboard\"\n          })\n        }), Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_UserDropdown__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n          css: /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(\"float:none;width:195px;\", linkStyle, \" \", router.asPath.startsWith(_global_utils_constants__WEBPACK_IMPORTED_MODULE_5__[\"USER_PATH\"]) ? activeLinkStyle : '', \" &:hover{\", activeLinkStyle, \";}\" + (false ? undefined : \";label:NavBar;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n        })]\n      })]\n    })]\n  });\n};\n\n_s(NavBar, \"XqHaJ6ZoZfCpr6ktUYV/cdqGMj4=\", false, function () {\n  return [_global_hooks_useAuthContext__WEBPACK_IMPORTED_MODULE_3__[\"default\"], next_router__WEBPACK_IMPORTED_MODULE_1__[\"useRouter\"], _emotion_react__WEBPACK_IMPORTED_MODULE_0__[\"useTheme\"]];\n});\n\n_c = NavBar;\n/* harmony default export */ __webpack_exports__[\"default\"] = (NavBar);\n\nvar _c;\n\n$RefreshReg$(_c, \"NavBar\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/NavBar.tsx\n");

/***/ })

})